from flask import Flask, render_template, redirect, url_for, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
from flask_socketio import SocketIO, emit

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.db'
db = SQLAlchemy(app)

socketio = SocketIO(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Models
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

class Task(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(150), nullable=False)
    due_date = db.Column(db.String(20), nullable=False)
    status = db.Column(db.String(20), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', back_populates='tasks')

User.tasks = db.relationship('Task', back_populates='user')

class Attendance(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(20), nullable=False)
    status = db.Column(db.String(20), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', back_populates='attendance')

User.attendance = db.relationship('Attendance', back_populates='user')

class Progress(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(20), nullable=False)
    score = db.Column(db.Integer, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', back_populates='progress')

User.progress = db.relationship('Progress', back_populates='user')

# Flask routes
@app.route('/login', methods=['GET', 'POST'])
def login():
    # Login functionality
    pass

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/')
@login_required
def index():
    return render_template('index.html')

@app.route('/api/tasks')
def get_tasks():
    tasks = Task.query.all()
    task_data = [{'title': task.title, 'due_date': task.due_date, 'status': task.status} for task in tasks]
    return jsonify(task_data)

@app.route('/api/attendance')
def get_attendance():
    attendance = Attendance.query.all()
    attendance_data = [{'date': a.date, 'status': a.status} for a in attendance]
    return jsonify(attendance_data)

@app.route('/api/progress')
def get_progress():
    progress = Progress.query.all()
    progress_data = [{'date': p.date, 'score': p.score} for p in progress]
    return jsonify(progress_data)

if __name__ == '__main__':
    db.create_all()  # Create database tables
    socketio.run(app, debug=True)
